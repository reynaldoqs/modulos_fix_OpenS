{"remainingRequest":"/home/reynaldo/Escritorio/interoparabilidad/interope-cliente/iop-plataforma-frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/reynaldo/Escritorio/interoparabilidad/interope-cliente/iop-plataforma-frontend/src/Usuario/components/composicion/Composicion.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/reynaldo/Escritorio/interoparabilidad/interope-cliente/iop-plataforma-frontend/src/Usuario/components/composicion/Composicion.vue","mtime":1544034483268},{"path":"/home/reynaldo/Escritorio/interoparabilidad/interope-cliente/iop-plataforma-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/reynaldo/Escritorio/interoparabilidad/interope-cliente/iop-plataforma-frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/reynaldo/Escritorio/interoparabilidad/interope-cliente/iop-plataforma-frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/reynaldo/Escritorio/interoparabilidad/interope-cliente/iop-plataforma-frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SearchBar from \"./SearchBar\";\nimport ParametrosList from \"./ParametrosList\";\nimport { composicionApi } from \"@/services\";\nexport default {\n  data: () => ({\n    drawer: true,\n    colorAlert: \"primary\",\n    userParametros: [],\n    parametros: [],\n    serviciosList: [],\n    serviciosFilter: [],\n    query: {},\n    loading: false\n  }),\n  methods: {\n    filterChanged(data) {\n      this.serviciosFilter = data;\n    },\n    search(query) {\n      this.query = query;\n      //mejorar, si aun tiene el foco, no quitar el drawer\n    },\n    openSaveComposicion() {\n      this.$hub.$emit(\"open-modal\");\n      this.$hub.$emit(\"set-modal-data\", {}, \"Guardar Composicion\", \"success\");\n    },\n    saveComposicion(data) {\n      const { nombre, descripcion, formato } = data;\n      let idPerfil = this.$store.getters.currentPerfil.id;\n      let clonModel = JSON.parse(JSON.stringify(this.composicionModel));\n      let composicionToSave = {\n        nombre: nombre,\n        descripcion: descripcion,\n        formato: formato,\n        rutas: clonModel.rutas.map(rata => {\n          return {\n            ruta: rata.ruta._id,\n            servicio: rata.servicio._id,\n            parametrosEntrada: rata.parametrosEntrada.map(p => p._id),\n            parametrosRespuesta: rata.parametrosRespuesta.map(p => ({\n              parametroRespuesta: p.parametroRespuesta._id\n            }))\n          };\n        })\n      };\n\n      composicionApi\n        .guardarComposicion({\n          idPerfil,\n          composicion: composicionToSave\n        })\n        .then(data => {\n          this.$q.notify({\n            message: \"Composición guardado correctamente\",\n            type: \"positive\",\n            color: \"positive\",\n            textColor: \"white\",\n            icon: \"verified_user\",\n            position: \"top-right\"\n          });\n          //guadar en el store aqui\n          this.userParametros = [];\n        })\n        .catch(err => {\n          this.$q.notify({\n            message: err.data.message.toString(),\n            type: \"negative\",\n            color: \"negative\",\n            textColor: \"white\",\n            icon: \"error\",\n            position: \"top-right\"\n          });\n        });\n    },\n    deleteParametro(id) {\n      let index = this.userParametros.findIndex(data => data._id === id);\n      if (index !== -1) {\n        this.userParametros.splice(index, 1);\n      }\n    },\n    selectParametro(parametro) {\n      let selectedObj = JSON.parse(JSON.stringify(parametro));\n      if (this.userParametros.length === 0) {\n        this.userParametros.push(selectedObj);\n        return;\n      }\n      this.checkAndPush(this.userParametros, selectedObj);\n    },\n    checkAndPush(anArray, anObject) {\n      if (anArray.find(data => data._id === anObject._id)) {\n        this.$q.dialog({\n          title: \"Elemento repetido\",\n          message: \"Ya tiene este parámetro seleccionado\",\n          ok: \"Aceptar\",\n          color: \"grey\"\n        });\n        return;\n      }\n      anArray.push(anObject);\n    },\n    loadParametros() {\n      this.loading = true;\n      composicionApi\n        .parametros()\n        .then(data => {\n          this.serviciosList = data.data.map(\n            data => data.idRespuesta.idRuta.idServicio\n          );\n          this.parametros = data.data;\n          this.loading = false;\n        })\n        .catch(err => (this.loading = false));\n    },\n    getComposicionModel(anArray) {\n      let rutas = [];\n      //obtiene identificadores para agruparlos\n      anArray.map(data => {\n        if (rutas.findIndex(i => data.idRespuesta.idRuta._id === i) === -1) {\n          rutas.push(data.idRespuesta.idRuta._id);\n        }\n      });\n      // los agrupa por los identificadores\n      let rutasGroups = rutas.map(ruta => {\n        let elements = anArray.filter(\n          data => data.idRespuesta.idRuta._id === ruta\n        );\n        return elements;\n      });\n      // construimos el modelo de composicon\n      let composiconModel = {\n        descripcion: null,\n        nombre: null,\n        rutas: rutasGroups.map(group => {\n          return {\n            //poner los key des descripcion de uso\n            parametrosEntrada: group[0].parametrosEntrada,\n            ruta: group[0].idRespuesta.idRuta,\n            servicio: group[0].idRespuesta.idRuta.idServicio,\n            parametrosRespuesta: group.map(subRuta => {\n              return {\n                parametroRespuesta: {\n                  _id: subRuta._id,\n                  nombre: subRuta.nombre,\n                  descripcion: subRuta.descripcion,\n                  tipo: subRuta.tipo,\n                  valorEjemplo: subRuta.valorEjemplo\n                }\n              };\n            })\n          };\n        })\n      };\n      return composiconModel;\n    }\n  },\n  computed: {\n    composicionModel() {\n      return this.getComposicionModel(this.userParametros);\n    }\n  },\n  mounted() {\n    this.loadParametros();\n    this.$hub.$on(\"saveComposicion\", this.saveComposicion);\n  },\n  components: {\n    SearchBar,\n    ParametrosList\n  },\n  destroyed() {\n    this.$hub.$off(\"saveComposicion\");\n  }\n};\n",{"version":3,"sources":["Composicion.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Composicion.vue","sourceRoot":"src/Usuario/components/composicion","sourcesContent":["<template>\n  <div class=\"composicion-container\">\n    <div class=\"composicion-list\">\n      <q-layout-drawer\n        content-class=\"tertiary\"\n        v-model=\"drawer\"\n        :content-style=\"{padding: '0', background:'#ff0000'}\"\n        side=\"left\"\n        :width=\"370\"\n      >\n        <div class=\"left\">\n          <search-bar\n            :composicionModel=\"composicionModel\"\n            :serviciosList=\"serviciosList\"\n            @onQuery=\"search\"\n            @onDelete=\"deleteParametro\"\n            @filterChange=\"filterChanged\"\n          />\n          <q-btn\n            @click.stop=\"openSaveComposicion\"\n            :disabled=\"!composicionModel.rutas.length > 0\"\n            class=\"save-option\"\n            round\n            size=\"md\"\n            color=\"positive\"\n            glossy\n            icon=\"save\"\n          ></q-btn>\n        </div>\n      </q-layout-drawer>\n      <div class=\"right\" id=\"parametros-list\">\n        <div class=\"loading-container\" v-show=\"loading\">\n          <q-spinner size=\"50px\"/>\n        </div>\n        <parametros-list\n          v-show=\"!loading\"\n          :parametros=\"parametros\"\n          :serviciosFilter=\"serviciosFilter\"\n          :query=\"query\"\n          @onSelect=\"selectParametro\"\n        />\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport SearchBar from \"./SearchBar\";\nimport ParametrosList from \"./ParametrosList\";\nimport { composicionApi } from \"@/services\";\nexport default {\n  data: () => ({\n    drawer: true,\n    colorAlert: \"primary\",\n    userParametros: [],\n    parametros: [],\n    serviciosList: [],\n    serviciosFilter: [],\n    query: {},\n    loading: false\n  }),\n  methods: {\n    filterChanged(data) {\n      this.serviciosFilter = data;\n    },\n    search(query) {\n      this.query = query;\n      //mejorar, si aun tiene el foco, no quitar el drawer\n    },\n    openSaveComposicion() {\n      this.$hub.$emit(\"open-modal\");\n      this.$hub.$emit(\"set-modal-data\", {}, \"Guardar Composicion\", \"success\");\n    },\n    saveComposicion(data) {\n      const { nombre, descripcion, formato } = data;\n      let idPerfil = this.$store.getters.currentPerfil.id;\n      let clonModel = JSON.parse(JSON.stringify(this.composicionModel));\n      let composicionToSave = {\n        nombre: nombre,\n        descripcion: descripcion,\n        formato: formato,\n        rutas: clonModel.rutas.map(rata => {\n          return {\n            ruta: rata.ruta._id,\n            servicio: rata.servicio._id,\n            parametrosEntrada: rata.parametrosEntrada.map(p => p._id),\n            parametrosRespuesta: rata.parametrosRespuesta.map(p => ({\n              parametroRespuesta: p.parametroRespuesta._id\n            }))\n          };\n        })\n      };\n\n      composicionApi\n        .guardarComposicion({\n          idPerfil,\n          composicion: composicionToSave\n        })\n        .then(data => {\n          this.$q.notify({\n            message: \"Composición guardado correctamente\",\n            type: \"positive\",\n            color: \"positive\",\n            textColor: \"white\",\n            icon: \"verified_user\",\n            position: \"top-right\"\n          });\n          //guadar en el store aqui\n          this.userParametros = [];\n        })\n        .catch(err => {\n          this.$q.notify({\n            message: err.data.message.toString(),\n            type: \"negative\",\n            color: \"negative\",\n            textColor: \"white\",\n            icon: \"error\",\n            position: \"top-right\"\n          });\n        });\n    },\n    deleteParametro(id) {\n      let index = this.userParametros.findIndex(data => data._id === id);\n      if (index !== -1) {\n        this.userParametros.splice(index, 1);\n      }\n    },\n    selectParametro(parametro) {\n      let selectedObj = JSON.parse(JSON.stringify(parametro));\n      if (this.userParametros.length === 0) {\n        this.userParametros.push(selectedObj);\n        return;\n      }\n      this.checkAndPush(this.userParametros, selectedObj);\n    },\n    checkAndPush(anArray, anObject) {\n      if (anArray.find(data => data._id === anObject._id)) {\n        this.$q.dialog({\n          title: \"Elemento repetido\",\n          message: \"Ya tiene este parámetro seleccionado\",\n          ok: \"Aceptar\",\n          color: \"grey\"\n        });\n        return;\n      }\n      anArray.push(anObject);\n    },\n    loadParametros() {\n      this.loading = true;\n      composicionApi\n        .parametros()\n        .then(data => {\n          this.serviciosList = data.data.map(\n            data => data.idRespuesta.idRuta.idServicio\n          );\n          this.parametros = data.data;\n          this.loading = false;\n        })\n        .catch(err => (this.loading = false));\n    },\n    getComposicionModel(anArray) {\n      let rutas = [];\n      //obtiene identificadores para agruparlos\n      anArray.map(data => {\n        if (rutas.findIndex(i => data.idRespuesta.idRuta._id === i) === -1) {\n          rutas.push(data.idRespuesta.idRuta._id);\n        }\n      });\n      // los agrupa por los identificadores\n      let rutasGroups = rutas.map(ruta => {\n        let elements = anArray.filter(\n          data => data.idRespuesta.idRuta._id === ruta\n        );\n        return elements;\n      });\n      // construimos el modelo de composicon\n      let composiconModel = {\n        descripcion: null,\n        nombre: null,\n        rutas: rutasGroups.map(group => {\n          return {\n            //poner los key des descripcion de uso\n            parametrosEntrada: group[0].parametrosEntrada,\n            ruta: group[0].idRespuesta.idRuta,\n            servicio: group[0].idRespuesta.idRuta.idServicio,\n            parametrosRespuesta: group.map(subRuta => {\n              return {\n                parametroRespuesta: {\n                  _id: subRuta._id,\n                  nombre: subRuta.nombre,\n                  descripcion: subRuta.descripcion,\n                  tipo: subRuta.tipo,\n                  valorEjemplo: subRuta.valorEjemplo\n                }\n              };\n            })\n          };\n        })\n      };\n      return composiconModel;\n    }\n  },\n  computed: {\n    composicionModel() {\n      return this.getComposicionModel(this.userParametros);\n    }\n  },\n  mounted() {\n    this.loadParametros();\n    this.$hub.$on(\"saveComposicion\", this.saveComposicion);\n  },\n  components: {\n    SearchBar,\n    ParametrosList\n  },\n  destroyed() {\n    this.$hub.$off(\"saveComposicion\");\n  }\n};\n</script>\n\n<style scoped>\n.composicion-container {\n  width: 100%;\n  height: 100%;\n}\n.composicion-list {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  --left-width: 480px;\n}\n.left {\n  width: 100%;\n  height: 100%;\n  max-height: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n  position: relative;\n}\n.right {\n  width: 100%;\n  height: 100%;\n  max-height: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n}\n.save-option {\n  position: absolute;\n  top: 15px;\n  right: 20px;\n}\n.loading-container {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n</style>\n"]}]}